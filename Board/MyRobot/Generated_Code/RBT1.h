/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : RBT1.h
**     CDE edition : Standard
**     Project     : ProcessorExpert
**     Processor   : MKL46Z256VMC4
**     Component   : Robot
**     Version     : Component 00.029, Driver 00.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2014-01-07, 23:17, # CodeGen: 208
**     Abstract    :
**
**     Settings    :
**     Contents    :
**         Init           - 
**         CreateAppTasks - 
**         ReceiveTask    - 
**         BatteryTask    - 
**         Run            - 
**         ReadLine       - 
**         ReadCharBT     - 
**         SendCharBT     - 
**         ParseLine      - 
**         ParseCommand   - 
**
**     For non-commercial use only.
**     (c) Copyright Surdeanu Mihai,
**     http://mihaisurdeanu.ro
**     mail: contact@mihaisurdeanu.ro
** ###################################################################*/
/*!
** @file RBT1.h
** @version 00.00
** @brief
**
*/         
/*!
**  @addtogroup RBT1_module RBT1 module documentation
**  @{
*/         

#ifndef __RBT1_H
#define __RBT1_H

/* MODULE RBT1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited components */
#include "OS.h"
#include "BlueSerial.h"
#include "TriggerTop.h"
#include "EchoTop.h"
#include "Wait.h"
#include "Debugging.h"
#include "IN1.h"
#include "IN3.h"
#include "IN2.h"
#include "IN4.h"

#include "Cpu.h"

#ifndef __CDEUserType_RBT1_Type0
#define __CDEUserType_RBT1_Type0
typedef char RBT1_Type0;               /**/
#endif


/* Callback for an output or error I/O function */
typedef void (*StdIO_Output_FunctType)(byte); 
/* Callback for an I/O input function. */
typedef void (*StdIO_Input_FunctType)(byte *);

/* Record containing input and output callback (stdin, stdout). */
typedef struct {                     
    StdIO_Input_FunctType stdIn;        /* standard input (read something using Bluetooth device) */
    StdIO_Output_FunctType stdOut;      /* standard output (send something using Bluetooth device) */
  } StdIOType;
typedef const StdIOType ConstStdIOType;

/* Current state for ultrasonic sensor. */
typedef enum {
    ECHO_IDLE,                            /* ultrasonic device not used */
    ECHO_TRIGGERED,                       /* started trigger pulse */
    ECHO_MEASURE,                         /* measuring echo pulse */
    ECHO_OVERFLOW,                        /* measurement too too long */
    ECHO_FINISHED                         /* measurement finished */
} EchoState;

typedef struct {
    LDD_TDeviceData *triggerTop;          /* device handle for the Trigger pin */
    LDD_TDeviceData *triggerLeft;
    LDD_TDeviceData *triggerRight;
    LDD_TDeviceData *echoDevice;          /* input capture device handle (echo pin) */
    volatile EchoState state;          /* current state */
    EchoTop_TValueType capture; /* input capture value */
} DeviceType;

/* Device handle for the ultrasonic device. */
static DeviceType usDevice; 
/* Position handler */
static int16_t motorLeft = 0, motorRight = 0;

static void RBT1_ParseCommand(unsigned char *cmd, ConstStdIOType *io);
/*
** ===================================================================
**     Method      :  RBT1_ParseCommand (component Robot)
**     Description :
**          
**     Parameters  :
**         NAME            - DESCRIPTION
**     Returns     :
**         void            - 
** ===================================================================
*/

static void RBT1_ParseLine(byte *cmdBuf, size_t cmdBufSize, ConstStdIOType *io);
/*
** ===================================================================
**     Method      :  RBT1_ParseLine (component Robot)
**     Description :
**          
**     Parameters  :
**         NAME            - DESCRIPTION
**     Returns     :
**         void            - 
** ===================================================================
*/

static void RBT1_SendCharBT(byte ch);
/*
** ===================================================================
**     Method      :  RBT1_SendCharBT (component Robot)
**     Description :
**          
**     Parameters  :
**         NAME            - DESCRIPTION
**     Returns     :
**         void            - 
** ===================================================================
*/

static void RBT1_ReadCharBT(byte *ch);
/*
** ===================================================================
**     Method      :  RBT1_ReadCharBT (component Robot)
**     Description :
**          
**     Parameters  :
**         NAME            - DESCRIPTION
**     Returns     :
**         void            - 
** ===================================================================
*/

static uint8_t RBT1_ReadLine(byte *buf, size_t bufSize, ConstStdIOType *io);
/*
** ===================================================================
**     Method      :  RBT1_ReadLine (component Robot)
**     Description :
**          
**     Parameters  :
**         NAME            - DESCRIPTION
**     Returns     :
**         void            - 
** ===================================================================
*/

void RBT1_Run();
/*
** ===================================================================
**     Method      :  RBT1_Run (component Robot)
**
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

static void RBT1_BatteryTask(void* param);
/*
** ===================================================================
**     Method      :  RBT1_BatteryTask (component Robot)
**
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


static void RBT1_ReceiveTask(void* param);
/*
** ===================================================================
**     Method      :  RBT1_ReceiveTask (component Robot)
**
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

static void RBT1_CreateAppTasks();
/*
** ===================================================================
**     Method      :  RBT1_CreateAppTasks (component Robot)
**
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void RBT1_Init();
/*
** ===================================================================
**     Method      :  RBT1_Init (component Robot)
**
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void EventEchoCapture(LDD_TUserData *UserDataPtr, int channel);
static uint16_t MeasureMicros(uint8_t channel);
static uint16_t calculateAirspeed(uint8_t temperatureCelsius);
static uint16_t MeasureMillimeters(uint8_t channel);

/* END RBT1. */

#endif 
/* ifndef __RBT1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
