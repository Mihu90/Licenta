/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : EchoTop.h
**     Project     : ProcessorExpert
**     Processor   : MKL46Z256VMC4
**     Component   : TimerUnit_LDD
**     Version     : Component 01.158, Driver 01.11, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2014-06-10, 23:27, # CodeGen: 221
**     Abstract    :
**          This TimerUnit component provides a low level API for unified hardware access across
**          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
**     Settings    :
**          Component name                                 : EchoTop
**          Module name                                    : TPM0
**          Counter                                        : TPM0_CNT
**          Counter direction                              : Up
**          Counter width                                  : 16 bits
**          Value type                                     : uint16_t
**          Input clock source                             : Internal
**            Counter frequency                            : 5.24288 MHz
**          Counter restart                                : On-overrun
**            Overrun period                               : Auto select
**            Interrupt                                    : Disabled
**          Channel list                                   : 3
**            Channel 0                                    : 
**              Mode                                       : Capture
**                Capture                                  : TPM0_C4V
**                Capture input pin                        : PTE31/TPM0_CH4
**                Capture input signal                     : US_Echo_D2
**                Edge                                     : both edges
**                Maximum time of event                    : 12.50000896 ms
**                Interrupt                                : Enabled
**                  Interrupt                              : INT_TPM0
**                  Interrupt priority                     : medium priority
**            Channel 1                                    : 
**              Mode                                       : Capture
**                Capture                                  : TPM0_C5V
**                Capture input pin                        : LCD_P29/CMP0_IN3/PTC9/I2C0_SDA/TPM0_CH5/I2S0_RX_BCLK
**                Capture input signal                     : 
**                Edge                                     : both edges
**                Maximum time of event                    : 12.50000896 ms
**                Interrupt                                : Enabled
**                  Interrupt                              : INT_TPM0
**                  Interrupt priority                     : medium priority
**            Channel 2                                    : 
**              Mode                                       : Capture
**                Capture                                  : TPM0_C3V
**                Capture input pin                        : DAC0_OUT/ADC0_SE23/CMP0_IN4/PTE30/TPM0_CH3/TPM_CLKIN1
**                Capture input signal                     : 
**                Edge                                     : both edges
**                Maximum time of event                    : 12.50000896 ms
**                Interrupt                                : Enabled
**                  Interrupt                              : INT_TPM0
**                  Interrupt priority                     : medium priority
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnCounterRestart                           : Disabled
**              OnChannel0                                 : Enabled
**              OnChannel1                                 : Enabled
**              OnChannel2                                 : Enabled
**              OnChannel3                                 : Disabled
**              OnChannel4                                 : Disabled
**              OnChannel5                                 : Disabled
**              OnChannel6                                 : Disabled
**              OnChannel7                                 : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init            - LDD_TDeviceData* EchoTop_Init(LDD_TUserData *UserDataPtr);
**         ResetCounter    - LDD_TError EchoTop_ResetCounter(LDD_TDeviceData *DeviceDataPtr);
**         GetCaptureValue - LDD_TError EchoTop_GetCaptureValue(LDD_TDeviceData *DeviceDataPtr, uint8_t...
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file EchoTop.h
** @version 01.11
** @brief
**          This TimerUnit component provides a low level API for unified hardware access across
**          various timer devices using the Prescaler-Counter-Compare-Capture timer structure.
*/         
/*!
**  @addtogroup EchoTop_module EchoTop module documentation
**  @{
*/         

#ifndef __EchoTop_H
#define __EchoTop_H

/* MODULE EchoTop. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */

#include "TPM_PDD.h"
#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif 


#ifndef __BWUserType_EchoTop_TValueType
#define __BWUserType_EchoTop_TValueType
  typedef uint16_t EchoTop_TValueType ; /* Type for data parameters of methods */
#endif
#define EchoTop_CNT_INP_FREQ_U_0 0x00500000UL /* Counter input frequency in Hz */
#define EchoTop_CNT_INP_FREQ_R_0 5242876.24190631F /* Counter input frequency in Hz */
#define EchoTop_CNT_INP_FREQ_COUNT 0U  /* Count of predefined counter input frequencies */
#define EchoTop_PERIOD_TICKS 0x00010000UL /* Initialization value of period in 'counter ticks' */
#define EchoTop_NUMBER_OF_CHANNELS 0x03U /* Count of predefined channels */
#define EchoTop_COUNTER_WIDTH 0x10U    /* Counter width in bits  */
#define EchoTop_COUNTER_DIR DIR_UP     /* Direction of counting */
/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define EchoTop_PRPH_BASE_ADDRESS  0x40038000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define EchoTop_Init_METHOD_ENABLED    /*!< Init method of the component EchoTop is enabled (generated) */
#define EchoTop_ResetCounter_METHOD_ENABLED /*!< ResetCounter method of the component EchoTop is enabled (generated) */
#define EchoTop_GetCaptureValue_METHOD_ENABLED /*!< GetCaptureValue method of the component EchoTop is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define EchoTop_OnChannel0_EVENT_ENABLED /*!< OnChannel0 event of the component EchoTop is enabled (generated) */
#define EchoTop_OnChannel1_EVENT_ENABLED /*!< OnChannel1 event of the component EchoTop is enabled (generated) */
#define EchoTop_OnChannel2_EVENT_ENABLED /*!< OnChannel2 event of the component EchoTop is enabled (generated) */



/*
** ===================================================================
**     Method      :  EchoTop_Init (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property ["Enable in init. code"] is set to "yes" value then
**         the device is also enabled (see the description of the
**         [Enable] method). In this case the [Enable] method is not
**         necessary and needn't to be generated. This method can be
**         called only once. Before the second call of Init the [Deinit]
**         must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* EchoTop_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  EchoTop_ResetCounter (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Resets counter. If counter is counting up then it is set to
**         zero. If counter is counting down then counter is updated to
**         the reload value.
**         The method is not available if HW doesn't allow resetting of
**         the counter.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK 
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError EchoTop_ResetCounter(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  EchoTop_GetCaptureValue (component TimerUnit_LDD)
*/
/*!
**     @brief
**         Returns the content of capture register specified by the
**         parameter ChannelIdx. This method is available when at least
**         one channel is configured.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         ChannelIdx      - Index of the component
**                           channel.
**     @param
**         ValuePtr        - Pointer to return value of the
**                           capture register.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK 
**                           ERR_PARAM_INDEX - ChannelIdx parameter is
**                           out of possible range
**                           ERR_NOTAVAIL -  The capture mode is not
**                           selected for selected channel.
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError EchoTop_GetCaptureValue(LDD_TDeviceData *DeviceDataPtr, uint8_t ChannelIdx, EchoTop_TValueType *ValuePtr);

/*
** ===================================================================
**     Method      :  EchoTop_Interrupt (component TimerUnit_LDD)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {FreeRTOS RTOS Adapter} ISR function prototype */
PE_ISR(EchoTop_Interrupt);

/* END EchoTop. */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif
/* ifndef __EchoTop_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
